pipeline:
  name: go-web-app
  identifier: gowebapp
  projectIdentifier: Default
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: Luke_Github
        repoName: sample-apps
        build: <+input>
  stages:
    - stage:
        name: Build and push
        identifier: Build_and_push
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: Run
                  name: Build
                  identifier: Build
                  spec:
                    connectorRef: Luke_dockerhub
                    image: golang:1.16-alpine
                    shell: Sh
                    command: |-
                      cd go-web-app
                      go build -o "./dist/<+pipeline.name>.${GOOS}.${GOARCH}"
                      pwd
                      ls -lh ./dist
                    envVariables:
                      GOOS: <+matrix.platforms.os>
                      GOARCH: <+matrix.platforms.arch>
                  failureStrategies: []
                  strategy:
                    matrix:
                      platforms:
                        - os: darwin
                          arch: amd64
                        - os: darwin
                          arch: arm64
                        - os: linux
                          arch: amd64
                        - os: windows
                          arch: amd64
              - parallel:
                  - step:
                      type: GCSUpload
                      name: Upload binary artifacts
                      identifier: Upload_binary_artifacts
                      spec:
                        connectorRef: GCP_Sales
                        bucket: luke-pipeline-outputs
                        sourcePath: go-web-app/dist
                        target: <+account.name>/<+project.identifier>/<+pipeline.name>/<+pipeline.sequenceId>/artifacts/
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Publish docker image
                      identifier: Publish_docker_image
                      spec:
                        connectorRef: Luke_dockerhub
                        repo: ldhertert/go-web-app
                        tags:
                          - latest
                          - <+pipeline.sequenceId>
                        dockerfile: go-web-app/Dockerfile
                        context: go-web-app
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: GKE_Sales
              namespace: luke
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
        when:
          pipelineStatus: Success
    - stage:
        name: azure-web-app-deploy
        identifier: azurewebappdeploy
        description: ""
        type: Deployment
        spec:
          deploymentType: AzureWebApp
          service:
            serviceRef: gowebappazureappservice
            serviceInputs:
              serviceDefinition:
                type: AzureWebApp
                spec:
                  artifacts:
                    primary:
                      type: DockerRegistry
                      spec:
                        tag: <+input>
          environment:
            environmentRef: staging
            deployToAll: false
            infrastructureDefinitions:
              - identifier: gowebappappservicestaging
          execution:
            steps:
              - step:
                  name: Slot Deployment
                  identifier: slotDeployment
                  type: AzureSlotDeployment
                  timeout: 20m
                  spec:
                    webApp: luke-app-service-demo
                    deploymentSlot: luke-app-service-demo-luke-app-service-demo-staging
              - step:
                  name: Traffic shift
                  identifier: trafficShift
                  type: AzureTrafficShift
                  timeout: 20m
                  spec:
                    traffic: "20"
              - step:
                  name: Swap slots
                  identifier: swapSlots
                  type: AzureSwapSlot
                  timeout: 20m
                  spec:
                    targetSlot: luke-app-service-demo
            rollbackSteps:
              - step:
                  name: WebApp rollback
                  identifier: webAppRollback
                  type: AzureWebAppRollback
                  timeout: 20m
                  spec: {}
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        variables: []
  variables:
    - name: build
      type: String
      default: "true"
      description: ""
      value: <+input>.allowedValues(true,false)
